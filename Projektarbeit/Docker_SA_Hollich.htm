<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Segoe UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
h1
	{mso-style-link:"Überschrift 1 Zchn";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;}
h2
	{mso-style-link:"Überschrift 2 Zchn";
	margin-top:2.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;}
h3
	{mso-style-link:"Überschrift 3 Zchn";
	margin-top:2.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;
	font-weight:normal;}
h4
	{mso-style-link:"Überschrift 4 Zchn";
	margin-top:2.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;
	font-style:italic;}
h5
	{mso-style-link:"Überschrift 5 Zchn";
	margin-top:2.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;}
h6
	{mso-style-link:"Überschrift 6 Zchn";
	margin-top:2.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-link:"Überschrift 7 Zchn";
	margin-top:2.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;
	font-style:italic;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:11.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:22.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:33.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:44.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:55.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:66.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{mso-style-link:"Fußnotentext Zchn";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"Kopfzeile Zchn";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"Fußzeile Zchn";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
span.MsoFootnoteReference
	{vertical-align:super;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Titel Zchn";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Titel Zchn";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Titel Zchn";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Titel Zchn";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
a:link, span.MsoHyperlink
	{color:#0563C1;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:#954F72;
	text-decoration:underline;}
p
	{margin-right:0cm;
	margin-left:0cm;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
code
	{font-family:"Courier New";}
pre
	{mso-style-link:"HTML Vorformatiert Zchn";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Sprechblasentext Zchn";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:9.0pt;
	font-family:"Segoe UI",sans-serif;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:36.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:36.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoTocHeading, li.MsoTocHeading, div.MsoTocHeading
	{margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
span.berschrift1Zchn
	{mso-style-name:"Überschrift 1 Zchn";
	mso-style-link:"Überschrift 1";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
span.berschrift2Zchn
	{mso-style-name:"Überschrift 2 Zchn";
	mso-style-link:"Überschrift 2";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
span.berschrift3Zchn
	{mso-style-name:"Überschrift 3 Zchn";
	mso-style-link:"Überschrift 3";
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;}
span.berschrift4Zchn
	{mso-style-name:"Überschrift 4 Zchn";
	mso-style-link:"Überschrift 4";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-style:italic;}
span.berschrift5Zchn
	{mso-style-name:"Überschrift 5 Zchn";
	mso-style-link:"Überschrift 5";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
span.berschrift6Zchn
	{mso-style-name:"Überschrift 6 Zchn";
	mso-style-link:"Überschrift 6";
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;}
span.berschrift7Zchn
	{mso-style-name:"Überschrift 7 Zchn";
	mso-style-link:"Überschrift 7";
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;
	font-style:italic;}
span.TitelZchn
	{mso-style-name:"Titel Zchn";
	mso-style-link:Titel;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
span.FunotentextZchn
	{mso-style-name:"Fußnotentext Zchn";
	mso-style-link:Fußnotentext;}
span.HTMLVorformatiertZchn
	{mso-style-name:"HTML Vorformatiert Zchn";
	mso-style-link:"HTML Vorformatiert";
	font-family:"Courier New";}
span.hljs-builtin
	{mso-style-name:hljs-built_in;}
span.hljs-string
	{mso-style-name:hljs-string;}
span.KopfzeileZchn
	{mso-style-name:"Kopfzeile Zchn";
	mso-style-link:Kopfzeile;}
span.FuzeileZchn
	{mso-style-name:"Fußzeile Zchn";
	mso-style-link:Fußzeile;}
span.kw4
	{mso-style-name:kw4;}
span.nt
	{mso-style-name:nt;}
span.SprechblasentextZchn
	{mso-style-name:"Sprechblasentext Zchn";
	mso-style-link:Sprechblasentext;
	font-family:"Segoe UI",sans-serif;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:70.85pt 70.85pt 2.0cm 70.85pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=DE link="#0563C1" vlink="#954F72">

<div class=WordSection1>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-family:"Times New Roman",serif'><img width=232 height=150
id="Grafik 12" src="Docker_SA_Hollich-Dateien/image001.jpg"></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman",serif'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><b><u><span
style='font-size:30.0pt;line-height:107%;font-family:"Times New Roman",serif;
text-transform:uppercase'>Projektarbeit </span></u></b></p>

<p class=MsoNormal align=center style='text-align:center'><b><span
style='font-size:30.0pt;line-height:107%;font-family:"Times New Roman",serif;
text-transform:uppercase'>Verwaltung unterschiedlicher Datenbanktechnologien
mittels Docker</span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b><span
style='font-size:30.0pt;line-height:107%;font-family:"Times New Roman",serif;
text-transform:uppercase'>&nbsp;</span></b></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;line-height:107%;font-family:"Times New Roman",serif;
text-transform:uppercase'>zu</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;line-height:107%;font-family:"Times New Roman",serif;
text-transform:uppercase'>Data Engineering</span></p>

<p class=MsoNormal><span lang=EN-GB style='font-size:18.0pt;line-height:107%;
font-family:"Times New Roman",serif;text-transform:uppercase'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-GB style='font-size:18.0pt;line-height:107%;
font-family:"Times New Roman",serif;text-transform:uppercase'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;line-height:107%;font-family:"Times New Roman",serif;
text-transform:uppercase'>Master:</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;line-height:107%;font-family:"Times New Roman",serif;
text-transform:uppercase'>Data Science &amp; Intelligent Analytics</span></p>

<p class=MsoNormal><span lang=EN-GB style='font-family:"Times New Roman",serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:16.0pt;line-height:107%;font-family:
"Times New Roman",serif'>Autor:</span></p>

<p class=MsoNormal><span style='font-size:14.0pt;line-height:107%;font-family:
"Times New Roman",serif'>Jochen Hollich               | 1810837475</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=DE-AT
style='font-size:14.0pt;line-height:107%;font-family:"Times New Roman",serif'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=DE-AT
style='font-size:14.0pt;line-height:107%;font-family:"Times New Roman",serif'>Datum
</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=DE-AT
style='font-size:14.0pt;line-height:107%;font-family:"Times New Roman",serif'>28.02.2019</span><br
clear=all style='page-break-before:always'>
</p>

<p class=MsoTocHeading>Inhalt</p>

<p class=MsoToc1><a href="#_Toc4480356">Theorie<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></p>

<p class=MsoToc2><a href="#_Toc4480357">Hintergrund<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></p>

<p class=MsoToc2><a href="#_Toc4480358">Grundlegendes zu Docker<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></p>

<p class=MsoToc2><a href="#_Toc4480359">Grundlegendes zur Historie<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></p>

<p class=MsoToc2><a href="#_Toc4480360">Zielformulierung dieser Arbeit,
Abgrenzung und Vorgehen<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>5</span></a></p>

<p class=MsoToc2><a href="#_Toc4480361">Lab-Setup<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>6</span></a></p>

<p class=MsoToc1><a href="#_Toc4480362">Praxis / Dokumentation<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>7</span></a></p>

<p class=MsoToc2><a href="#_Toc4480363">Linux Installation<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>7</span></a></p>

<p class=MsoToc2><a href="#_Toc4480364">Docker Installation<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>12</span></a></p>

<p class=MsoToc2><a href="#_Toc4480365">Docker arbeiten<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>14</span></a></p>

<p class=MsoToc5><a href="#_Toc4480366">Konzeptionell<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>14</span></a></p>

<p class=MsoToc2><a href="#_Toc4480367">Exemplarische Befehlsaufschlüsselung am
Beispiel MS-SQL Server<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>15</span></a></p>

<p class=MsoToc5><a href="#_Toc4480368">Operativ<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>16</span></a></p>

<p class=MsoToc2><a href="#_Toc4480369">Interaktion mit MS-SQL-Server
Containern<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>18</span></a></p>

<p class=MsoToc3><a href="#_Toc4480370">Zugriff aus Linux mittels der Shell in
den SQL Server hinein<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>18</span></a></p>

<p class=MsoToc3><a href="#_Toc4480371">Zugriff aus dem Windows Wirtssystem in
den SQL Server mittels SSMS<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>19</span></a></p>

<p class=MsoToc3><a href="#_Toc4480372">Docker verteilen<span style='color:
windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>20</span></a></p>

<p class=MsoToc4><a href="#_Toc4480373">Remove<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>20</span></a></p>

<p class=MsoToc4><a href="#_Toc4480374">Push<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>20</span></a></p>

<p class=MsoToc4><a href="#_Toc4480375">Pull<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>21</span></a></p>

<p class=MsoToc3><a href="#_Toc4480376">Abschluss SQL-Server<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>21</span></a></p>

<p class=MsoToc2><a href="#_Toc4480377">MySQL<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>21</span></a></p>

<p class=MsoToc2><a href="#_Toc4480378">Cassandra<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>23</span></a></p>

<p class=MsoToc2><a href="#_Toc4480379">Neo4j<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>24</span></a></p>

<p class=MsoToc1><a href="#_Toc4480380">Ausblick<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>28</span></a></p>

<p class=MsoToc1><a href="#_Toc4480381">Quellen<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>29</span></a></p>

<p class=MsoNormal>&nbsp;</p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal><span style='font-size:16.0pt;line-height:107%;font-family:
"Calibri Light",sans-serif;color:#2F5496'>&nbsp;</span></p>

<h1><a name="_Toc4480356">Theorie</a></h1>

<h2><a name="_Toc4480357">Hintergrund</a></h2>

<p class=MsoNormal>Die vorliegende Seminararbeit wurde im Rahmen des Modules DATA
ENGINEERING, betreut von Prof. (FH) Dr. Michael Kohlegger im Wintersemester
2018-19 an der FH-Kufstein angefertigt. In dem Modul Data-Engineering lernen
die Studierende unterschiedliche Technologien zu Data-Engineering
Fragestellungen kennen und die grundlegende Entwicklung dieser Umgebungen. Im
konkreten werden die Technologien MS-SQL &amp; MySQL als exemplarisches
Beispiel für Relationale Datenbanken, Appache Cassandra als Beispiel für einen
Wide-Column-Store, Neo4J aus den Graphen-Datenbanken und MongoDB exemplarisch
für eine NoSQL-Datenabank kennen. Die Interaktion der Studierenden besteht
überwiegend aus den Bereichen SQL-Statements der DDL, DML und DQL.</p>

<p class=MsoNormal>Neben dieser vorgegebenen Roadmap werden die Studierenden in
einer Projektarbeit mit einer Fragestellung konfrontiert, in welcher sie sich
über den abgesteckten Lernhorizont mit dem Thema Data-Engineering im Kontext
von anderen Technologien bzw. anderen Anwendungsbereichen als in den Lehrveranstaltungen
behandelt erweitern soll. Hierzu soll ein individuelles Projekt angefertigt und
dokumentiert werden. </p>

<p class=MsoNormal>Ich habe mich für das Projektthema Umsetzung unterschiedlicher
Datenbanktechnologien mittels Docker entschlossen, da mich neben der erlernten
Entwickler- Brille auch die Management und Administrations Sicht von
Datenbanken interessiert. Docker ist eine Container-Virtualisierungsumgebung
für unterschiedliche Dienste.</p>

<p class=MsoNormal>Für die Umsetzung der Aufgabe wurde sich eng an den Lehrplan
des Udemy Kurses <a href="https://www.udemy.com/docker-mastery/">Docker Mastery</a>
gehalten. Dieser Kurs hat in didaktisch gut aufgearbeiteter Art und Weise alle
wichtigen Inhalte für diese Seminararbeit bereitgestellt. </p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc4480358">Grundlegendes zu Docker</a></h2>

<p class=MsoNormal>Das Anwendungsprogramm Docker lässt sich am besten dadurch
erklären indem man einen Vergleich gegenüber Virtualisierungsprogrammen zieht:</p>

<p class=MsoNormal><img border=0 width=605 height=311 id="Grafik 5"
src="Docker_SA_Hollich-Dateien/image002.jpg"></p>

<p class=MsoNormal>In der klassischen Darstellung mittels Virtualisierung
(Rechts in der Grafik)reden wir in der Regel von einem OS im OS. Neben den
didaktischen Anwendungsfällen hat diese Virtualisierung aber auch Use-Cases im
Bereich der Wirtschaft, da hierbei u.a. gegebene physische Ressourcen effizienter
verwendet werden können. </p>

<p class=MsoNormal>Ziel in einem wirtschaftlichen Szenario könnte sein eine
Neue Funktionalität bzw. einen Dienst in das Unternehmen aufzunehmen.</p>

<p class=MsoNormal><b>Lösungsbeschreibung Virtualisierung:</b></p>

<p class=MsoNormal>In einer Virtualisierungsumgebung würde man für die neue
Funktionalität vermeintlich einen neuen (virtuellen) Server (Linux/Windows.)
ausrollen und on-top dieses neue OS den jeweiligen neuen Dienst/ Funktionalität
bereitstellen. Durch die Virtualisierung wird unter anderem die Hardware
abstrahiert, was zu geringeren Schwierigkeiten in der Wartung führen kann, aber
als Resultat für den neuen Dienst muss ein weiteres OS (Das virtuelle Host
Operating-System für den Dienst) gewartet werden.</p>

<p class=MsoNormal><b>Lösungsbeschreibung Container-Management: </b></p>

<p class=MsoNormal>Wenn man oben beschriebenes Szenario mit einer Container
Management Software wie Docker löst dann geschieht dies nach folgendem
Vorgehen:</p>

<p class=MsoNormal>Docker wird zunächst in dem physischen Hostsystem
implementiert. Sobald Docker ausgerollt ist wird ein Container erzeugt, welcher
die nötigen Umgebungsvariablen für den Dienst beinhaltet. Somit kann man den gewünschten
Dienst direkt in diesen neuen Container hinein-deployed und der Dienst kann aus
dem Container heraus mit den restlichen Teilnehmern (Hostsystem &amp; etwaiges physisches
und logisches Netzwerk kommunizieren). Mit diesem Ansatz wurde das etwaige
OS-System als Basis von einem Dienst, wie im Beispiel der Virtualisierung
abstrahiert. Demzufolge sind die reinen Core-Container hinsichtlich ihrer Größe
sehr schlank.</p>

<p class=MsoNormal>Docker bietet hierbei neben der Erstellung und Verwaltung
von Containern auch die Möglichkeit diese Container in bestehende Netzwerke
mittels unterschiedlicher Technologien (v.a. NAT &amp; Bridged) einzubinden.
Dazu werden den Container IP Adressen zugewiesen, auf welche dann von den
jeweiligen Clients zugegriffen werden kann.</p>

<p class=MsoNormal>Vorteile aus der Containerverwaltung</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt'>1)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Schnelles
Deployment von Server-Diensten</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'>2)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Rasches
Entwickeln von Umgebungen für Developmentteams</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'>3)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Einsparung
von Festplattenkapazität durch fehlendes (virtuelles) Server-OS-System</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'>4)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Abstraktion
des Hosts-Systems =&gt; Einsparung von Wartungszeiten</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-18.0pt'>5)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Plattformunabhängigkeit
der Container</p>

<h2><a name="_Toc4480359">Grundlegendes zur Historie</a></h2>

<p class=MsoNormal>In der IT leben große Innovationen in der Regel etwa eine
Dekade, wenn wir nun die Booms der letzten 30 Jahren betrachten so können wir
feststellen, dass in den 90er Jahren die Bewegung von großen Mainframe Rechner
zu Stand Alone PCs erkennbar war. Die 00er Jahre basierten auf der Abstraktion
der Hardware und die Virtualisierung war ein zentraler Begriff. Durch den
Ausbau der Internettechnologien wurde es in den 10er Jahren, in welchen wir uns
gegenwärtig befinden die Abstraktion von ganzen Datenzentren, durch die
Migration in den ominösen Begriff Cloudcomputing abgelöst. Es gibt Meinungen,
dass die nächste große Welle in der IT die Abstraktion von OS sein wird indem
man gewünschte Dienste oder Applikationen direkt in Container verschiebt und
für diese Anwendungszwecke ausschließlich mit Containern plattformunabhängig arbeiten
wird.</p>

<p class=MsoNormal><img border=0 width=605 height=339
src="Docker_SA_Hollich-Dateien/image003.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc4480360">Zielformulierung dieser Arbeit, Abgrenzung und Vorgehen</a></h2>

<p class=MsoNormal>Das Ziel, welches in diesem Seminar-Projekt verfolgt wurde
lautet:</p>

<p class=MsoNormal align=center style='text-align:center'><b><span
style='font-size:14.0pt;line-height:107%'>Verwaltung unterschiedlicher
Datenbanktechnologien mittels Docker</span></b></p>

<p class=MsoNormal>Da die Docker Communtity Edition(kostenlos) im Gegensatz zur
Enterprise Edition (Kostenpflichtig) nicht unter den Red-Head Linux Distributionen
lauffähig ist wurde sich für das Debian basierte OS Ubuntu entschlossen. Außerdem
waren in diesem Bereich seitens des Studierenden grundlegende Kenntnisse
vorhanden.</p>

<p class=MsoNormal>Dieses Ubuntu-OS wurde wiederum als Desktop Version
ausgerollt, da sich der Studierende zum Zeitpunkt der Erstellung dieser SA
nicht fundiert mit der Anwendung Docker ausgekannt hatte. Im Laufe der
Umsetzung des Projektes wurde sich schrittweise in Docker eingearbeitet und aus
diesem Grund war es hilfreich innerhalb des Host Systems von Docker (Virtueller
Maschine/ Ubuntu) eine grafische Oberfläche zu besitzen.</p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc4480361">Lab-Setup</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>

<table cellpadding=0 cellspacing=0 align=left>
 <tr>
  <td width=0 height=3></td>
 </tr>
 <tr>
  <td></td>
  <td><img width=708 height=520 src="Docker_SA_Hollich-Dateien/image004.png"
  alt="Image result for ssms logo,Image result for ubuntu logo,Image result for vmware logo,Image result for docker logo,Image result for container,Image result for python logo"></td>
 </tr>
</table>

 &nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<br clear=ALL>

<p class=MsoNormal><img width=66 height=66
src="Docker_SA_Hollich-Dateien/image005.png" align=left hspace=12
alt="Image result for workbench mysql logo">

<table cellpadding=0 cellspacing=0 align=left>
 <tr>
  <td width=237 height=13></td>
 </tr>
 <tr>
  <td></td>
  <td><img width=77 height=77 src="Docker_SA_Hollich-Dateien/image006.png"
  alt="Image result for windows 10 logo"></td>
 </tr>
</table>

</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<br clear=ALL>

<p class=MsoNormal> Das blaue Feld in der obigen Darstellung symbolisiert das
Grundlegende Host/Wirts-Operating System. In diesem Fall liegt ein Windows 10
PRO in der Version 10.0.17763 Build 17763 vor. Innerhalb sind die nötigen
Managementtools für die Containerinstanzen installiert. Weitere Betriebssysteme
werden mittels VMware® Workstation 12 Pro 12.5.2 build-4638234 virtualisiert.</p>

<p class=MsoNormal>Das Orange Feld symbolisiert die logische virtuelle Maschine
Ubuntu. Die genauen HW-Spezifikationen werden in der Dokumentation erläutert.
In dieser virtuellen Maschine wiederum Ubuntu -Desktop Version 18.04.01 als
Basis für die Anwendung Docker 18.09.0 installiert. In diese Umgebung wird
die Docker Applikation eingebettet.</p>

<p class=MsoNormal>Aufbauend auf der Docker Anwendung wiederum wird ein
Container erzeugt in welchem eine Instanz des SQL Servers läuft und soweit
konfiguriert, sodass man aus dem aus dem Windows Host direkt auf diese
Container-Instanz mit einem geeigneten Management Tool für die jeweilige
Technologie zugreifen und Änderungen vornehmen kann. </p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc4480362">Praxis / Dokumentation</a></h1>

<p class=MsoNormal>Der nachfolgende Teil dieser Seminararbeit stellt die
Dokumentation der operativen Umsetzung des Projektes beginnend von der
initialen Laberstellung in VM-Ware, über die Integration der Technologien bis
hin zum zentralen Austausch der Docker Container.</p>

<h2><a name="_Toc4480363">Linux Installation</a></h2>

<p class=MsoNormal>Wie bereits in der Theorie beschrieben wird zunächst auf dem
bestehenden Host System eine Linux Ubuntu Desktop nach dem aktuellsten Stable-Release
benötigt. Hierzu wird die Iso entsprechend von der Ubuntu Webseite
heruntergeladen:</p>

<p class=MsoNormal><a href="https://www.ubuntu.com/download/desktop">https://www.ubuntu.com/download/desktop</a></p>

<p class=MsoNormal>Im Anschluss wird diese Iso Datei auf einer virtuellen Bare-Metall
mit folgenden Hardwarespezifikationen deployed:</p>

<p class=MsoNormal><img border=0 width=605 height=531 id="Grafik 1"
src="Docker_SA_Hollich-Dateien/image007.jpg"></p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Was an dieser Hardwarekonstellation signifikant ins Auge
sticht sind die beiden NIC-Adapter, die in dieses Setup integriert worden sind.
Der Grund hierfür liegt darin:</p>

<p class=MsoNormal style='margin-left:35.25pt;text-indent:.15pt'><u>Nic 1</u>:
Hier ist die Virtuelle Maschine auf dem VM-Ware Switch 1 / VM-Net1 (Host-Only)
angeschlossen. Diese entsprechende NIC ist mit einer statischen IP ausgestattet.
Somit kann aus dem Host System mit einer entsprechenden SSH-Applikation auf der
CLI-Ebene eine Verbindung zu dem virtuellen Server hergestellt werden. Das hat
den Vorteil, dass bei der Entwicklung und Umsetzung der Lösung lediglich auf
einem OS (in diesem Falle Windows 10) gearbeitet werden kann. // es wurde
versucht die Netzwerkkonfiguration des basierenden Host-Windows Systems
dahingehend zu ändern, sodass dieser als an der virtuellen Schnittstelle zur
Linux VM in Form eines virtuellen Routers zwischen den Netzwerken übersetzt,
dies ist jedoch leider nicht geglückt und wurde somit mit den beiden NICs
umarbeitet</p>

<p class=MsoNormal style='margin-left:35.25pt;text-indent:.15pt'><u>Nic 2</u>:
Hier ist die Voreinstellung NAT (Network-Address-Translation) gewählt. Somit
wird durch das Host System hindurch eine Konnektivität mit dem Internet
gewährleistet. Die IP-Vergabe auf dieser NIC übernimmt der DHCP-Dienst der
VM-Ware intern.</p>

<p class=MsoNormal style='margin-left:35.25pt;text-indent:.15pt'>&nbsp;</p>

<p class=MsoNormal style='text-indent:.15pt'>Das Deployment von Ubuntu wurde
standardmäßig durchgeführt. Die Credentials für dieses OS in diesem Test-Lab
lauten:</p>

<p class=MsoNormal style='text-indent:.15pt'><span lang=EN-GB>USER: labadmin</span></p>

<p class=MsoNormal style='text-indent:.15pt'><span lang=EN-GB>Password: Test123
</span></p>

<p class=MsoNormal style='text-indent:.15pt'><span lang=EN-GB>sudo-Password:
Test123</span></p>

<p class=MsoNormal style='text-indent:.15pt'>Nach dem fertigen Deployment des
OS wurde zunächst die Maschine hinsichtlich der hinterlegten Repositories, der
Applikation und des OS-Kernels auf dem aktuellsten Stand gebracht mittels des
Befehles:</p>

<p class=MsoNormal align=center style='text-align:center;text-indent:.15pt'><u><span
lang=EN-GB>sudo apt-get update &amp;&amp; sudo apt-get -y upgrade &amp;&amp;
sudo apt-get dist-upgrade &amp;&amp; sudo reboot</span></u></p>

<p class=MsoNormal>Nach dem Updaten wird mit dem Befehl:</p>

<p class=MsoNormal><u><span lang=EN-GB>sudo apt-get install openssh-server</span></u></p>

<p class=MsoNormal>der SSH-Server auf der Maschine installiert. Ab diesem
Zeitpunkt kann von dem Host System mit einem geeigneten SSH-Client Application
auf den Ubuntu Server zugegriffen werden. Da sich jedoch im Moment noch eine
Dynamische IP auf NIC 2 hinterlegt ist, schalten wir im Nächsten Schritt die
IP-Vergabe von NIC2 auf statisch, sodass gewährleistet werden kann. dass auch künftig
die Maschine unter der gleichen IP zu erreichen ist:</p>

<p class=MsoListParagraph style='margin-left:53.25pt;text-indent:-18.0pt'>1)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Öffnen
des entsprechenden Textfiles:</p>

<p style='margin:0cm;margin-bottom:.0001pt;text-indent:35.4pt'><span
style='font-size:11.0pt;font-family:"Calibri",sans-serif'>sudo nano
etc/network/interfaces</span></p>

<p style='margin:0cm;margin-bottom:.0001pt;text-indent:35.4pt'><span
style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin:0cm;margin-bottom:.0001pt;text-indent:35.4pt'><span
style='font-size:11.0pt;font-family:"Calibri",sans-serif'>Und hinterlegt
folgenden Text:</span></p>

<p style='margin:0cm;margin-bottom:.0001pt;text-indent:35.4pt'><img border=0
width=440 height=166 id="Grafik 2" src="Docker_SA_Hollich-Dateien/image008.png"></p>

<p style='margin:0cm;margin-bottom:.0001pt;text-indent:35.4pt'><span
style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin:0cm;margin-bottom:.0001pt;text-indent:35.4pt'><span
style='font-size:11.0pt;font-family:"Calibri",sans-serif'>Ob die Konfiguration
geglückt ist kann in Linux mittels ifconfig überprüft werden.</span></p>

<p style='margin:0cm;margin-bottom:.0001pt;text-indent:35.4pt'><img border=0
width=604 height=181 id="Grafik 13" src="Docker_SA_Hollich-Dateien/image009.jpg"></p>

<p style='margin:0cm;margin-bottom:.0001pt;text-indent:35.4pt'><span
style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin:0cm;margin-bottom:.0001pt;text-indent:35.4pt'><span
style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin:0cm;margin-bottom:.0001pt;text-indent:35.4pt'><span
style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>Die IP &amp; Subnetzmaske sind für dieses
Szenario angepasst und müssen entsprechend auf das jeweilige Test-lab angepasst
werden.</span><img border=0 width=604 height=412 id="Grafik 8"
src="Docker_SA_Hollich-Dateien/image010.jpg"></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>Ob nun eine Verbindung zwischen den beiden
logischen Betriebssystemen besteht wird mittels ping geprüft</span></p>

<p style='margin:0cm;margin-bottom:.0001pt'><img border=0 width=592 height=883
id="Grafik 18" src="Docker_SA_Hollich-Dateien/image011.png"></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal>Mit diesem Schritt ist das Deployment, updaten und
bereitstellen der nötigen Entwicklungsumgebung auf dem virtuellen Server abgeschlossen.
Der Windows Client(mein Hostsystem in diesem Szenario), erhält auf dem
virutelle Interface zur Linux-VM ebenfalls eine statische IP-Adresse im selben
Netz.</p>

<p class=MsoNormal><br>
Im weiteren Verlauf dieser Dokumentation wird die Kommunikation mit dem Ubuntu
Server und somit auch das Deployment von Docker mittels der SSH-Lösung vom MobaX-Terms
aus dem Windows Host heraus geschehen. Der Grund weshalb MobaX-Term als SSH
Client verwendet wird ist da hierin für die Windows Nutzer eine freundliche
Möglichkeit zum Datei-Exchange zwischen Windows und Ubuntu Host besteht. Somit
können auch die Testdatenbanken in das Test-Lab zum Ubuntu Host übertragen
werden. Ein weiterer zentraler Vorteil ist darin zu finden, da durch die
zentrale Verwaltung nun auch befehle im Windows kopiert und direkt auf CLI- Ebene
eingefügt werden kann, sowie dass das Tastaturlayout sich dem gegebenen Layout
des Hostsystems anpasst. Somit wird eine lästige Verwaltungsarbeit des Linux
Servers umgangen.</p>

<p class=MsoNormal><img border=0 width=605 height=454 id="Grafik 20"
src="Docker_SA_Hollich-Dateien/image012.jpg"></p>

<p class=MsoNormal>An dieser Stelle empfiehlt es sich in der VM-Ware als
Sicherheitsmaßnahme einen Snapshot zu erstellen</p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc4480364">Docker Installation</a></h2>

<p class=MsoNormal>Docker in einer Linux-Environment kann auf
unterschiedlichste Weisen installiert werden. Hierbei spielt jedoch immer das
zugrundeliegende OS und die entsprechende Hardwarekonstellation eine zentrale Rolle.
Es gibt nun die Möglichkeit sich anhand der detaillierten Docker-Dokumentation
durch das Deployment dieser Applikation hindurch zu hangeln, oder mittels des
Docker-Scriptes die entsprechende Applikation zu installieren. Mittels des
Scriptes werden zunächst die Umgebungsparameter geprüft (OS des künftigen
Docker Servers/ Version OS / Etwaige HW-Komponenten) und auf Basis dieser
Informationen automatisiert das beste Docker für das etwaige System ausgewählt
und installiert. Im weiteren Schritt wurde sich für das Deployment mittels des
Scriptes entschlossen. Das Script ist einsichtlich unter:</p>

<p class=MsoNormal><a href="https://get.docker.com/">https://get.docker.com/</a>
.</p>

<p class=MsoNormal>Als Vorbereitung für das Script-Deployment ist auf Ubuntu
die Applikation CURL notwendig. Diese wird zunächst ausgerollt:</p>

<p class=MsoNormal><b><u>sudo apt install curl</u></b></p>

<p class=MsoNormal>Im nächsten Schritt wird das Script heruntergeladen:</p>

<p class=MsoNormal><b><u><span lang=EN-GB>curl -fsSL https://get.docker.com -o
get-docker.sh</span></u></b></p>

<p class=MsoNormal>und mit dem Befehl</p>

<p class=MsoNormal><b><u>sh get-docker.sh</u></b></p>

<p class=MsoNormal>wird das Script ausgeführt und somit Docker optimal für
die jeweilige Umgebung ausgerollt.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Mittels des Befehls:</p>

<p class=MsoNormal><b><u>docker version</u></b></p>

<p class=MsoNormal>ist erkenntlich, dass Docker nun auf dem Server installiert
und betriebsbereit ist:</p>

<p class=MsoNormal><img border=0 width=400 height=335 id="Grafik 3"
src="Docker_SA_Hollich-Dateien/image013.png"><br>
<br>
</p>

<p class=MsoNormal>Alternativ Docker direkt in windows mittels der Toolbox</p>

<p class=MsoNormal>Hier brauch ich für den Doker dienst keine eigenständige
Virtuelle maschine und rei mal nicht einen Hyper v, das ist für den Windows
User optimal.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='text-indent:35.4pt'>Netzer Install Docker Toolbox</p>

<p class=MsoNormal style='text-indent:35.4pt'>Das ist Docker ohne Hyper V für
Windows</p>

<p class=MsoNormal style='text-indent:35.4pt'>&nbsp;</p>

<p class=MsoNormal style='text-indent:35.4pt'><a
href="https://docs.docker.com/toolbox/toolbox_install_windows/">https://docs.docker.com/toolbox/toolbox_install_windows/</a></p>

<p class=MsoNormal style='text-indent:35.4pt'>&nbsp;</p>

<p class=MsoNormal style='text-indent:35.4pt'>Nachdem das setup durchgelaufen
ist / braucht einige berechtigungen für gewisse adapter von der Oracle box /
sollte parallel zur VM laufen // </p>

<p class=MsoNormal style='text-indent:35.4pt'>&nbsp;</p>

<p class=MsoNormal style='text-indent:35.4pt'>Danach öffnen der Docker
Quickstart</p>

<p class=MsoNormal style='text-indent:35.4pt'><img border=0 width=605
height=302 id="Grafik 43" src="Docker_SA_Hollich-Dateien/image014.jpg"></p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc4480365">Docker arbeiten</a></h2>

<p class=MsoNormal>Der folgende Abschnitt wird zunächst auf das konzeptionelle
Arbeiten mit Docker und im Anschluss das operative Arbeiten mit Docker eingehen</p>

<h5><a name="_Toc4480366">Konzeptionell</a></h5>

<p class=MsoNormal>Wie bereits einleitend beschrieben ist Docker ein Tool zu
Containerverwaltung und zum Ausführen dieser Container. Diese Container können
entweder selbst erzeugt werden oder direkt von einer entsprechenden Plattform
bezogen werden. Im Zuge dieser Seminararbeit werden mit Docker Container der
Datenbanktechnologien</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt'>1)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>MS-SQL-Server</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'>2)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>MySQL</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'>3)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Cassandra</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'>4)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Neo4J</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-18.0pt'>5)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>MongoDB</p>

<p class=MsoNormal>arbeiten.</p>

<p class=MsoNormal>Eine Möglichkeit wäre diese Container selbst zu erstellen
und mit diesem zu arbeiten. Dies erfordert jedoch vertiefte Kenntnisse mit dem
Programm Docker. Die vorliegende Seminararbeit hat jedoch den Fokus auf das
Zusammenspiel zwischen Docker und jeweiligen Technologien als auf tieferes
Docker Verständnis. Daher verwenden wir im weiteren Schritt die bereits
bereitgestellten Image-Dateien, aus welchem wir einen Container erzeugen.</p>

<p class=MsoNormal><b>Was geschieht, wenn ein Container bereitgestellt wird?</b></p>

<p class=MsoNormal>Hierzu führen wir einen weiteren Begriff Image.ein. Diese
Image-Dateien (Binaries/Dependencies/Metadaten für Applikation) werden in ihrer
Grundkonfiguration auf unterschiedlichen Plattformen ausgetauscht und speichern
die Grundsettings eines Containers ab. Aus diesen Grundsettings kann man dann
laufende Instanzen sogenannte Container erstellen. Dieses Verhalten lässt einen
Vergleich zur Objektorientierten Programmierung zu. Hierbei werden aus Klassen
(Docker-Terminologie: Images) einzelnen Instanz (Docker-Terminologie:
Container/Instanz) erstellt. Die jeweiligen Instanzen können im nächsten
Schritt individualisiert und modifiziert werden. Dadurch können aus einem Image
beispielsweise mehrere Container erzeugt werden.</p>

<p class=MsoNormal>Somit wird beim ersten Aufrufen einer Instanz zunächst
geprüft ob die jeweils zugrundeliegende Image-Datei bereits lokal auf dem Hostserver
Ubuntu/Docker-Server bereits existiert. Ist diese noch nicht vorhanden wird
die nötige Image-Datei von dem eingestellten Image-Hub bezogen. Default
(docker-Hub <a href="https://hub.docker.com/">https://hub.docker.com/</a>). In
unserem Falle Verwenden wir sowohl dieses default Docker Hub für den Bezug der Image.</p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc4480367">Exemplarische Befehlsaufschlüsselung am Beispiel
MS-SQL Server</a></h2>

<p class=MsoNormal>Bei der Instanz-Erstellung muss außerdem über Schalter der
Container soweit mit Umgebungsvariablen konfiguriert werden sodass dieser
entsprechend mit seiner Umwelt kommunizieren kann. Konkret an einem Beispiel veranschaulicht
bedeutet dies, dass mittels des Schalters:</p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;
margin-left:35.25pt;margin-right:0cm'>

<p style='margin:0cm;margin-bottom:.0001pt;border:none;padding:0cm'><a
name="_Hlk531006516"><span style='font-size:11.0pt;font-family:"Calibri",sans-serif;
background:fuchsia'>&nbsp;</span></a></p>

<p style='margin:0cm;margin-bottom:.0001pt;border:none;padding:0cm'><span
lang=EN-GB style='font-size:11.0pt;font-family:"Calibri",sans-serif;background:
fuchsia'>docker container run</span><span lang=EN-GB style='font-size:11.0pt;
font-family:"Calibri",sans-serif'> <span style='background:aqua'>-e 'ACCEPT_EULA=Y'</span>
<span style='background:red'>-e 'SA_PASSWORD=yourStrong(!)Password'</span> <span
style='background:lime'>-p 1433:1433</span> <span style='background:darkcyan'>-d</span>
<span style='background:purple'>-name MSSQLServerDOCKER </span>-<span
style='background:yellow'>v ~/SQLData:/home/dockertest/SQLData </span><span
style='background:lightgrey'>microsoft/mssql-server-linux:2017-CU8</span></span></p>

<p style='margin:0cm;margin-bottom:.0001pt;border:none;padding:0cm'><span
lang=EN-GB style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

</div>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span lang=EN-GB style='font-size:11.0pt;font-family:
"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>Der
Befehl <span style='background:fuchsia'>docker container run </span>ist der
Basic Command um eine Instanz eines Images / einen individuellen Container zu
starten. Wie beschrieben wird etwaig das Image heruntergeladen und dann
entsprechend aus dem Image heraus ein individueller Container erzeugt.</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>Der
Schalter Environment / <span style='background:aqua'>-e 'ACCEPT_EULA=Y' </span>besagt
lediglich, dass die End User Licence von Microsoft ausführenden humanen Person akzeptiert
wird.</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>Der
User System Administrator (SA) spielt in der Umgebung des MSSQL Servers eine
sehr zentrale Rolle. Daher muss dieser beim Erzeugen einer Instanz vorab mit
einem entsprechenden Passwort konfiguriert werden. Dies wird mittels des
Schalters <span style='background:red'>-&nbsp;e&nbsp;SA_PASSWORD=yourStrong(!)Password'
</span>erreicht-</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>Der
grüne Sektor bedeutet, dass der Host, auf dem für MS-SQL-Server defaultmäßigen
Port 1433 an der Hostinternen FW lauscht und diesen Port bei Ansprache an den
MSSQL-Server defaultmäßigen Port 1433 an den Container weiterleitet. Somit ist gewährleistet,
dass auf einem running Container von dem Zugrundeliegenden Host-Operating
System durch das Virtuelle Ubuntu auf dem <span style='background:lime'>Port
1433 </span>hin zudem Container auf dem <span style='background:lime'>Port 1433
</span>zugegriffen werden kann.</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>Mittels
des Schalters <span style='background:darkcyan'>detach| -d</span> wird festgelegt,
dass dieser Container zwar auf der CLI aufgerufen wird, aber im Hintergrund
läuft. Somit kann die aktuelle CLI Sitzung weiter genutzt werden.</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>Mittels
des Schalters <span style='background:purple'>-name MSSQLServerDOCKER </span>wird
festgelegt unter welchem Namen die Instanz angesprochen werden kann.  Der
Status einer Instanz kann ein und ausgeschaltet sein. Wie bereits oben
beschrieben haben jedoch laufende Container für die Kommunikation mit der
Umwelt entsprechend eine IP-Adresse. Diese Adresse kann jedoch mit einem
reboot eines Containers erneuern. Aus diesem Grunde ist innerhalb der Docker
Container-Verwaltung die Namenszuweisung der Container in Zusammenhang mit
einem internen DNS-Dienst fest verankert. </span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>Ein
weiteres zentrales Element ist das Einbinden von einem Shared Laufwerk zwischen
dem Hostsystem(Ubuntu) und dem Container. Dies wird mittels <span
style='background:yellow'>v&nbsp;~/SQLData:/home/dockertest/SQLData </span>erledigt.
Hierbei muss davor beachtet werden, dass das Verzeichnis ~/SQLSData auf Ubuntu
eben angelegt wird.</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span style='font-size:11.0pt;font-family:"Calibri",sans-serif'>Im
letzten Schritt muss der Name der Imagedatei und das dazugehörige Repository angegeben
werden. In diesem Falle laden wir das Image aus dem Default-Repository (Docker
Hub) herunter. Für diese Aufgabe ist die Zeile: <span style='background:lightgrey'>microsoft/mssql-server-linux:2017-CU8
</span>verantwortlich.</span></p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#2F5496'><br clear=all>
</span>

<h5><a name="_Toc4480368">Operativ</a> </h5>

<p class=MsoNormal>Bevor wir die Images herunterladen und erzeugen wird
zunächst das spätere Sharelaufwerk mittels des Befehles:</p>

<p class=MsoNormal>mkdir ~/SQLData </p>

<p class=MsoNormal>in dem Home-Laufwerk des Users, in meinem Fall labadmin erzeugt.
An diesem zentralen Verzeichnis sollen später die Daten zwischen dem Host und
den Docker Containern ausgetauscht werden.</p>

<p class=MsoNormal>Außerdem gewähren wir dem user docker in unserem Lab volle
administrationsrechte mittels:</p>

<p class=MsoNormal><span lang=EN-GB>sudo usermod -a -G docker $USER</span></p>

<p class=MsoNormal>Dies ist in unseren Lab-Szenario bedenklos umzusetzen, da
wir mit keinen sensiblen/produktiven/schützenswerten, sondern ausschließlich
mit fiktiven Daten arbeiten. Für Produktivumgebungen ist Docker grundsätzlich
nicht gedacht, da hier auch das Sicherheitskonzept nicht state oft he art
ist. Aber auch für Entwicklungsumgebungen könnte man über ein geeignetes
Rechtesystem verwaltet in Linux etwas Sicherheit in das Lab bringen. Der
Einfachheit zu liebe wurde dieser Schritt übersprungen und der Verwaltungsuser
Docker und labadmin gänzlich mit den nötigen sudo-Rechten ausgestattet.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Für unser Test-Lab beschaffen wir uns einen unabhängigen
Container, von</p>

<p class=MsoNormal>                <b><u>MS-Hub</u></b></p>

<p class=MsoNormal style='margin-left:35.4pt'><u>sudo docker container run -d
-p 1433:1433 --name MSSQLMicHub -e 'ACCEPT_EULA=Y' -e
'SA_PASSWORD=YourStrong!Passw0rd' -v ~/SQLData:/home/dockertest/SQLData
mcr.microsoft.com/mssql/server:2017-latest</u></p>

<p class=MsoNormal style='margin-left:35.4pt'>(Developer-Edition)</p>

<p class=MsoNormal>(Die übrigen Container der MySQL, Cassandra, Neo4J und
MongoDB werden künftig vom Default Docker hub bezogen, hier wurde exemplarisch
von einem anderen Verteilungshub das Image bezogen)</p>

<p class=MsoNormal>Beim erstmaligen Aufruf dieser Befehle werden die Image
Dateien vom jeweiligen-Repository heruntergeladen und eine laufende
Instanz/Container mit den gegebenen Environment-Variablen gestartet.</p>

<p class=MsoNormal>Hier der initiale Download:</p>

<p class=MsoNormal><img border=0 width=605 height=314 id="Grafik 25"
src="Docker_SA_Hollich-Dateien/image015.jpg"></p>

<p class=MsoNormal>Die bestehenden Images, welche auf dem Docker-Server
hinterlegt sind können mit dem Befehl:</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><u>docker image ls -a</u></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><img border=0 width=605 height=121 id="Grafik 30"
src="Docker_SA_Hollich-Dateien/image016.jpg"></p>

<p class=MsoNormal>Angezeigt werden. </p>

<p class=MsoNormal>Hieraus ist zu sehen, dass das Image vom Microsoft Hub erst
vor 2Monaten (relativ zur Erstellung dieser Dokumentation auf dem jeweiligen
Repository veröffentlicht wurde.</p>

<p class=MsoNormal>Der Status der existenten Container im Server wiederum kann
über den Befehl:</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><u>docker container ls:</u></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><img border=0 width=604 height=106 id="Grafik 29"
src="Docker_SA_Hollich-Dateien/image017.jpg"></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>&nbsp;</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>Hierbei erhält man folgende Informationen:</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>Container ID:                     Zur Abgrenzung und Ansprache
einzelner Container</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>IMAGE:                                Das zu grundliegende Image für
die Erstellung des Containers</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>CREATED:                            Zeitpunkt wann der Container auf
diesem Server erzeugt wurde</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>STATUS:                              Status ob der Container laufend
oder abgeschaltet ist</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>PORTS:                                 Auf welche Ports im Host bzw. im
Containermanagement wird gelauscht</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>NAMES:                               Namensgebung des Containers,
wichtig für die DNS Ansprache</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc4480369">Interaktion mit MS-SQL-Server Containern</a></h2>

<p class=MsoNormal>Wie der Status einer Imagedatei bzw. eines Containers ist
wurde im oberen Kapitel bereits erläutert. In diesem Teilbereich wollen wir auf
die Befehle eingehen mit welchen Container gestoppt und gestartet werden
können.</p>

<p class=MsoNormal>Da durch den oberen Befehls direkt nach dem Download des
Images ein Container mit entsprechenden Umgebungsvariablen erzeugt wird besteht
ein laufender Container, welcher über <b><u>docker container ls</u></b> -a
angezeigt werden kann. Dieser laufende Container kann mit dem Befehl </p>

<p class=MsoNormal><b><u>docker container stop <span style='color:black;
background:#FFC000'>Name </span></u></b></p>

<p class=MsoNormal>gestoppt werden. Ab diesem Zeitpunkt sind die Dienste des
Containers nicht mehr erreichbar.</p>

<p class=MsoNormal>Um einen gestoppten bereits existierenden Container wieder
zu starten kann mittels</p>

<p class=MsoNormal><b><u>docker container start <span style='color:black;
background:#FFC000'>Name</span></u></b></p>

<p class=MsoNormal>der ausgewählte Container wieder gestartet werden</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=605 height=72 id="Grafik 31"
src="Docker_SA_Hollich-Dateien/image018.jpg"></p>

<h3><a name="_Toc4480370">Zugriff aus Linux mittels der Shell in den SQL Server
hinein</a></h3>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>Ziel ist es hier auf Basis der Host Bash in
den Container hinein die Befehlszeile zu erlangen um somit TSQL Befehle(SQLServer
spezifischer Dialekt) abzufeuern</span></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><b><u><span lang=EN-GB>docker exec -it MSSQLMicHub
&quot;bash&quot;</span></u></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>nun befinden wir uns auf der Kommandozeile
des SQL-Servers und mittels </span></p>

<p style='margin:0cm;margin-bottom:.0001pt'><img border=0 width=480 height=54
id="Grafik 24" src="Docker_SA_Hollich-Dateien/image019.png"></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>melden wir uns am Server direkt an um TSQL
Scripte auszuführen</span></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><b><u><span lang=EN-GB>/opt/mssql-tools/bin/sqlcmd -S
localhost -U SA -P <span style='color:red'>'</span>YourStrong!Passw0rd<span
style='color:red'>'</span></span></u></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>Bitte beachte die<span style='color:red'> Roten   </span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='color:red'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><img border=0 width=605 height=80 id="Grafik 32"
src="Docker_SA_Hollich-Dateien/image020.jpg"></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='color:red'>&nbsp;</span></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>Ab diesem Zeitpunkt können TSQL Scripte
ausgeführt werden und somit ist das erste Ziel von dem Ubuntu Host auf den
MS-SQL Container zuzugreifen erreicht</span></p>

<p style='margin:0cm;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Calibri",sans-serif'>&nbsp;</span></p>

<h3><a name="_Toc4480371">Zugriff aus dem Windows Wirtssystem in den SQL Server
mittels SSMS</a></h3>

<p class=MsoNormal>Bedingt durch die <span style='background:lime'>Port
Bezeichnung</span> beim erstellen einer Instanz wird dem Host System Ubuntu von
Beginn an mitgeteilt, dass eingehende Anfragen auf dem Port 1433 direkt an den
Container weitergeleitet werden. Auf dem Container gehen diese Anfragen
ebenfalls auf dem Port <span style='background:darkgreen'>1433</span> ein:</p>

<p style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;margin-left:35.25pt;
margin-bottom:.0001pt'><span lang=EN-GB style='font-size:11.0pt;font-family:
"Calibri",sans-serif;color:#AEAAAA;background:white'>docker container run -e
'ACCEPT_EULA=Y' -e 'SA_PASSWORD=yourStrong(!)Password'</span><span lang=EN-GB
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#AEAAAA'> </span><span
lang=EN-GB style='font-size:11.0pt;font-family:"Calibri",sans-serif;background:
lime'>-p 1433:</span><span lang=EN-GB style='font-size:11.0pt;font-family:"Calibri",sans-serif;
background:darkgreen'>1433</span><span lang=EN-GB style='font-size:11.0pt;
font-family:"Calibri",sans-serif'> <span style='color:#AEAAAA'>-d -name
MSSQLServerDOCKER -v ~/SQLData:/home/dockertest/SQLData
microsoft/mssql-server-linux:2017-CU8</span></span></p>

<p class=MsoNormal><span lang=EN-GB>&nbsp;</span></p>

<p class=MsoNormal>Somit ist eine Verbindung aus dem Basis Windows Host direkt
zu dem Docker Container erreicht:</p>

<p class=MsoNormal><img border=0 width=456 height=247 id="Grafik 26"
src="Docker_SA_Hollich-Dateien/image021.jpg"
alt="Computergenerierter Alternativtext:&#10;Microsoft SQL Server Management Studio &#10;Edit View Debug Tools Window Help &#10;, v' New Query &#10;Object Explorer &#10;Connect  &#10;Quick La &#10;Connect to Server &#10;Server type &#10;Server name &#10;Password &#10;SQL Server &#10;Database Engine &#10;192 1688080 &#10;SQL Server Authentication &#10;Remember password "></p>

<p class=MsoNormal><img border=0 width=605 height=330 id="Grafik 33"
src="Docker_SA_Hollich-Dateien/image022.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Hier kann dann das bereitgestellte <a
href="https://gitlab.web.fh-kufstein.ac.at/kohleggermichael/de4ds/raw/master/Mega-Tutorial___SQL/sales-db___DDL-DML___SQL-Server.sql">TSQL-DDL
File</a> ausgeführt werden, welches im Umkehrschluss die DB mit den
entsprechenden Tabellen erstellt:</p>

<p class=MsoNormal><img border=0 width=605 height=280 id="Grafik 34"
src="Docker_SA_Hollich-Dateien/image023.jpg"></p>

<h3><a name="_Toc4480372">Docker verteilen</a></h3>

<h4><a name="_Toc4480373">Remove</a></h4>

<p class=MsoNormal>Mittels des Befehles rm kann man Container oder Images aus
dem System wieder entfernen. Hierzu muss man die Container / Image ID Kennen</p>

<p class=MsoNormal>Docker container/image rm Container/ImageID</p>

<h4><a name="_Toc4480374">Push</a></h4>

<p class=MsoNormal>Docker ist ein Tool um Container schnell und effizient
zwischen unterschiedlichen Teilnehmern, in einem privaten Netzwerk mittels
eines eigenes Docker Servers oder einem öffentlichen Docker Hub zu verteilen. Hierzu
muss aus einem laufenden Container zunächst mittels des Befehles </p>

<p class=MsoNormal><b><u>docker commit Container-id Image-Name</u></b></p>

<p class=MsoNormal><b><u>docker commit c52186187013 <span style='background:
yellow'>jhc1990</span>/test</u></b></p>

<p class=MsoNormal>Eine Image Datei erstellt werden. Diese neu erstellte Image
Datei ist nun auch unter den lokalen Image Dateien mit folgendem Befehl
ersichtlich. Wichtig an dieser Stelle ist die Namensgebung des Images. Jhc1990
ist mein Benutzername an der Docker Plattform und alle meine öffentlich
geteilten Image Dateien müssen somit der Namenkonvention jhc1990/* folgen.</p>

<p class=MsoNormal><b><u>docker image ls -a</u></b></p>

<p class=MsoNormal>Für den Upload dieser Image Datei in den Docker Hub hinein
muss man sich zunächst mit den individuellen Docker Credentials anmelden (Hierzu
muss man den Registrierungsprozess unter XYZ durchführen) </p>

<p class=MsoNormal><b><u>docker login</u></b></p>

<p class=MsoNormal>Zuletzt wird mittels</p>

<p class=MsoNormal><b><u>docker push Containername </u></b></p>

<p class=MsoNormal><b><u>docker push jhc1990/test</u></b></p>

<p class=MsoNormal>Das eben erstellte Image auf die entsprechende Plattform
hinaufgeladen.</p>

<h4><a name="_Toc4480375">Pull</a></h4>

<p class=MsoNormal>Diese erzeugte Imagedatei ist nun unter <a
href="https://hub.docker.com/r/jhc1990/test/">https://hub.docker.com/r/jhc1990/test/</a>
öffentlich ersichtlich und kann von jedem Interessenten, der eine entsprechende
Docker-Umgebung besitzt mittels des Befehles </p>

<p class=MsoNormal><b><u>docker pull jhc1990/test</u></b></p>

<p class=MsoNormal>in die externe individuelle Docker-Umgebung übernommen
werden.</p>

<h3><a name="_Toc4480376">Abschluss SQL-Server</a></h3>

<p class=MsoNormal>Somit haben wir einen ersten vertieften Einblick in die
Zusammenarbeit zwischen Docker und der Relationalen Datenbanktechnologie
eingesehen. In den nächsten schritten werde ich mein Vorgehen weniger detailliert
dokumentieren, da häufig Befehle ähnlich bis nahezu identisch wie bisher
geschrieben werden</p>

<h2><a name="_Toc4480377">MySQL</a></h2>

<p class=MsoNormal>Ein geeigneter MySql Container kann analog wie der
MSSQL-Container mittels des Befehles:</p>

<pre><code><span lang=EN-GB>docker run -d -p 3306:3306 --name mysql2 -e MYSQL_ROOT_PASSWORD=Password11  mysql:5.7</span></code></pre>

<p class=MsoNormal><span lang=EN-GB> </span>angelegt  werden.</p>

<p class=MsoNormal>Im Anschluss ist dieser Container über </p>

<p class=MsoNormal>Docker Container ls -a</p>

<p class=MsoNormal>In der Container Ablage ersichtlich und kann entsprechend
gestartet und wenn gewünscht gestoppt werden:</p>

<p class=MsoNormal><img border=0 width=605 height=246 id="Grafik 35"
src="Docker_SA_Hollich-Dateien/image024.jpg"></p>

<p class=MsoNormal>Ausgehend aus dem laufenden Container in der virtuellen Instanz
kann nun aus dem Windows Host im lab mittels des MySQL Verwaltungstools Workbench
auf die DB zugegriffen werden:</p>

<p class=MsoNormal><img border=0 width=605 height=402 id="Grafik 21"
src="Docker_SA_Hollich-Dateien/image025.jpg"></p>

<pre>Der Standarduser ist root, und das Passwort wurde in der Instanzierung des Containers gewählt (<code>docker run -d -p 3306:3306 --name mysql2 -e MYSQL_ROOT_PASSWORD=<span
style='background:yellow'>Password11</span>  mysql:5.7</code></pre>

<p class=MsoNormal>)</p>

<p class=MsoNormal>Sobald die Anmeldung erfolgreich geschehen kann mit dieser
Datenbankinstanz über die Management Software interagiert werden:</p>

<p class=MsoNormal><img border=0 width=605 height=344 id="Grafik 36"
src="Docker_SA_Hollich-Dateien/image026.jpg">.</p>

<p class=MsoNormal>Auch diese Instanz wurde auf das Docker Hub hochgeladen und
ist unter:</p>

<p class=MsoNormal><a href="https://hub.docker.com/r/jhc1990/mysql_lab_dataeng">https://hub.docker.com/r/jhc1990/mysql_lab_dataeng</a></p>

<p class=MsoNormal>ersichtlich. Die dafür nötigen Schritte sind gänzlich analog
dem vorgehen wie es beim MSSQL Server vorgenommen wurde.</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc4480378">Cassandra</a></h2>

<p class=MsoNormal>Um die Cassandra Technologie zu implementieren wurde nach folgendem
Tutorial vorgegangen: <a
href="https://academy.datastax.com/content/docker-tutorial">https://academy.datastax.com/content/docker-tutorial</a>
.</p>

<p class=MsoNormal>Hierbei wird zunächst DataStax, welches die Appache Cassandra
beinhaltet ausgerollt und anschließend mittels DataStax Studio auf die
eigentliche Datenbank zugegriffen. Mittels des DataStaxOpsCenter wird eine
Management Umgebung mittels Webtechnologien bereitgestellt.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt'>a)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Beschaffen
der nötigen Images</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'>b)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Bevor
der eigentliche Datenbankdienst muss ein Container für das Managementstudio
erstellt werden</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt;line-height:
normal'><span lang=EN-GB style='font-size:12.0pt;font-family:"Times New Roman",serif'>c)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-GB style='font-size:10.0pt;font-family:"Courier New"'>docker run -e
DS_LICENSE=accept --name my-opscenter -d -p 8888:8888 datastax/dse-opscenter</span></p>

<p class=MsoListParagraphCxSpMiddle>Der Grund hierfür liegt daran, dass die einzelnen
Cassandra Nodes im Anschluss erstellt werden. Bei der Instanziierung dieser
individuellen Nodes wird jedoch der Management Node direkt an die Individual Nodes
mitgegeben</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'><code><span
style='line-height:107%;font-family:"Calibri",sans-serif'>d)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></code>Starten
eines einzelnen Data-Stax(Cassandra included) Server<br>
<code><span style='font-size:10.0pt;line-height:107%'>docker run -e
DS_LICENSE=accept --link <span style='background:yellow'>my-opscenter:opscenter</span>
--name my-dse -d datastax/dse-server<br>
Dieser Schritt kann beliebig oft wiederholt werden, um beliebig viele DataStax
Container dem Management node hinzuzufügen, sodass diese von dort aus verwaltet
werden können, wichtig hierbei ist lediglich dass immer ein anderer Name der
einzelnen Nodes verwendet wird</span></code></p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'>e)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Ab
nun ist aus dem Cluster aus dem Host über die Webtechnologien erreichbar</p>

<p class=MsoListParagraphCxSpMiddle><img border=0 width=605 height=279
id="Grafik 41" src="Docker_SA_Hollich-Dateien/image027.jpg"></p>

<p class=MsoListParagraphCxSpMiddle>Über dieses Webinterface kann nun ein
Cassandra Cluster entsprechend erzeugt, konfiguriert und gewartet werden.</p>

<p class=MsoListParagraphCxSpLast>&nbsp;</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>Zugriff auf einen einzelnen Singelnode/</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>Wichtig ist, dass ein Container bereits läuft, jedoch kann dann über
dieses Web-Interface mit den Nodes kommuniziert werden:</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><img border=0 width=605 height=151 id="Grafik 42"
src="Docker_SA_Hollich-Dateien/image028.jpg"></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>&nbsp;</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>Die entsprechenden Container können unter </p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><a href="https://hub.docker.com/r/jhc1990/dse-server">https://hub.docker.com/r/jhc1990/dse-server</a></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>und </p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><a href="https://hub.docker.com/r/jhc1990/dse-studio">https://hub.docker.com/r/jhc1990/dse-studio</a>
</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>eingesehen werden.</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>&nbsp;</p>

<h2><a name="_Toc4480379">Neo4j</a></h2>

<p class=MsoNormal>Ein geeignete Neo4J Instanz kann analog wie der
MSSQL-Container mittels des Befehles:</p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New"'>docker
run \</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New"'>   
--publish=7474:7474 \</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New"'>   
--volume=$HOME/neo4j/data:/data \</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New"'>   
</span><span style='font-size:10.0pt;font-family:"Courier New"'>neo4j:2.3</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'>&nbsp;</p>

<p class=MsoNormal>Danach ist aus einem üblichen Browser die Management-area
vom Neo4J Container ersichtlich</p>

<p class=MsoNormal><img border=0 width=605 height=313 id="Grafik 37"
src="Docker_SA_Hollich-Dateien/image029.jpg"></p>

<p class=MsoNormal>Sobald dieser Knoten steht, kann auch normal mit diesem
interagiert werden:</p>

<p class=MsoNormal><img border=0 width=605 height=486 id="Grafik 38"
src="Docker_SA_Hollich-Dateien/image030.jpg"></p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Das entsprechende Image kann unter: </p>

<p class=MsoNormal><a href="https://hub.docker.com/r/jhc1990/neo4j_lab_dataeng">https://hub.docker.com/r/jhc1990/neo4j_lab_dataeng</a></p>

<p class=MsoNormal>eingesehen und heruntergeladen werden</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>MongoDB</p>

<p class=MsoNormal>Als letzte Datenbanktechnologie hatten wir uns mit MongoDB
im Lab beschäftigt. Analog zum bisherigen vorgehen können wir nun wieder das
Image starten:</p>

<p class=MsoNormal><span lang=EN-GB style='font-size:14.0pt;line-height:107%;
font-family:"Courier New"'>docker run -p 27017:27017 -name mongodb -d mongo</span></p>

<p class=MsoNormal>Für den Zugriff aus der Windows Powershell auf den MongoDB Server
und den dortigen Container brauchen wir das CLI Programm MongoDB welches über
die Zeile und dem Packetmanager Choco</p>

<p class=MsoNormal>choco install mongodb</p>

<p class=MsoNormal>Beschafft wird:</p>

<p class=MsoNormal><img border=0 width=515 height=167 id="Grafik 28"
src="Docker_SA_Hollich-Dateien/image031.png"></p>

<p class=MsoNormal>Nach dem erfolgreichen Start des Containers und der
gegebenen lokalen Installation von MongoDB kann eine Verbindung hergestellt
werden:</p>

<p class=MsoNormal><img border=0 width=604 height=172 id="Grafik 27"
src="Docker_SA_Hollich-Dateien/image032.jpg"></p>

<p class=MsoNormal>Außerdem kann nun auch via PyCharm die Verbindung
vorgenommen werden:</p>

<p class=MsoNormal><img border=0 width=605 height=340 id="Grafik 39"
src="Docker_SA_Hollich-Dateien/image033.jpg"></p>

<p class=MsoNormal>Und mittels des Managementtools Robo-3T: <img border=0
width=605 height=325 id="Grafik 40" src="Docker_SA_Hollich-Dateien/image034.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Netzer:</p>

<p class=MsoNormal>Es gibt auch ein Managementtool namens Mongo-express welches
ebenfalls in einem Container gestartet wird und dann von außerhalb für die
Verwaltung erreichbar ist: </p>

<p class=MsoNormal><span lang=EN-GB style='font-size:14.0pt;line-height:107%;
font-family:"Courier New"'>docker run </span><span lang=EN-GB style='font-size:
14.0pt;line-height:107%;font-family:"Arial",sans-serif'></span><span
lang=EN-GB style='font-size:14.0pt;line-height:107%;font-family:"Courier New"'>name
mongoexpress --link <span style='background:yellow'>mongodb</span>:mongo -p
8081:8081 -d mongo-express</span></p>

<p class=MsoNormal><span style='font-size:14.0pt;line-height:107%;font-family:
"Courier New"'>Davor muss ein <span style='background:yellow'>Containerdb</span>
mit dem Namen <span style='background:yellow'>Mongodb</span> bereits laufen</span></p>

<p class=MsoNormal><img border=0 width=605 height=326 id="Grafik 44"
src="Docker_SA_Hollich-Dateien/image035.jpg"></p>

<p class=MsoNormal>Erstellung von Random JSON-files = JavaScriptObjectNotation</p>

<p class=MsoNormal><a href="https://www.json-generator.com/">https://www.json-generator.com/</a></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc4480380">Ausblick</a></h1>

<p class=MsoNormal>In dieser Seminararbeit wurde ein Grundlegender Umriss des
Themas Umsetzung unterschiedlicher Datenbanktechnologien mittels Docker in
einer Linux Umgebung umrissen. Eine vertiefte Anwendung der Thematik wäre das
Docker Swarm Verhalten, in welchem mehrere Docker Container als Netzwerk
fungieren und somit eine Ideale Grundlage für ein SQL-Server bzw. auch für
eines Cassandra-Cluster bilden. Sowohl die traditionelle Technologie der
relationalen SQL-Serverund  die NoSQL Lösungen als auch die Innovative Container-Lösung
Docker werden in der zunehmenden Datenflut des 21 Jahrhunderts eine immer zentralere
Rolle spielen. Daher war es für den Studierenden durchaus sinnvoll sich mit
diesen Fachgebieten näher zu beschäftigen.</p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc4480381">Quellen</a></h1>

<p class=MsoListParagraph style='text-indent:-18.0pt'>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Udemy Kurs</p>

<p class=MsoNormal style='text-indent:18.0pt'><a
href="https://www.udemy.com/docker-mastery/">https://www.udemy.com/docker-mastery/</a></p>

<span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='text-indent:35.4pt'>Netzer Install Docker Toolbox</p>

<p class=MsoNormal style='text-indent:35.4pt'>Das ist Docker ohne Hyper V für
Windows</p>

<p class=MsoNormal style='text-indent:35.4pt'>&nbsp;</p>

<p class=MsoNormal style='text-indent:35.4pt'><a
href="https://docs.docker.com/toolbox/toolbox_install_windows/">https://docs.docker.com/toolbox/toolbox_install_windows/</a></p>

<p class=MsoNormal style='text-indent:35.4pt'>&nbsp;</p>

<p class=MsoNormal style='text-indent:35.4pt'>&nbsp;</p>

<p class=MsoNormal style='text-indent:35.4pt'>Ergänzung mit den Slides vom
Luaks // SoftDev Semester 2 Slides</p>

</div>

</body>

</html>
